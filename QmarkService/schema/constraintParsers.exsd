<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.emf.validation">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.emf.validation" id="constraintParsers" name="XML Constraint Definition Parsers"/>
      </appInfo>
      <documentation>
         This extension point allows plug-ins to register objects which know how to parse
constraints encoded in a particular language from the information supplied in an
&lt;tt&gt;IConstraintDescriptor&lt;/tt&gt;.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="constraintParser" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="constraintParser">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="lang"/>
         </appInfo>
         <documentation>
            Defines a constraint parser.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="lang" type="string" use="required">
            <annotation>
               <documentation>
                  Indicates the constraint language which this builder supports.

This matches values of the &quot;lang&quot; attribute in &lt;constraint/&gt; elements in XML constraint declarations.
The language is not case-sensitive.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The name of a class implementing a specialization of the &lt;code&gt;IConstraintParser&lt;/code&gt; interface, which handles the associated constraint language.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.emf.validation.service.IConstraintParser"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         1.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
To provide support for constraints defined in scripted Java embedded in the constraint &apos;body&apos;, using BeanShell, one might define an extension like the following:
&lt;/p&gt;
&lt;pre&gt;
     &lt;extension
         point=&quot;org.eclipse.emf.validation.constraintParsers&quot;&gt;
      &lt;constraintParser
            class=&quot;com.example.validation.BeanShellConstraintParser&quot;
            lang=&quot;Java-BeanShell&quot;&gt;
      &lt;/constraintParser&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
The value of the &lt;tt&gt;&amp;lt;constraintParser&amp;gt;&lt;/tt&gt; element &lt;tt&gt;class&lt;/tt&gt; attribute must be 
the fully qualified name of a class that implements one of the specializations of
the &lt;code&gt;org.eclipse.emf.validation.service.IConstraintParser&lt;/code&gt; interface defined by the framework.  The currently available specializations are &lt;code&gt;org.eclipse.emf.validation.service.IParameterizedConstraintParser&lt;/code&gt; and &lt;code&gt;org.eclipse.emf.validation.xml.IXmlConstraintParser&lt;/code&gt;.  Note that the latter interface is deprecated; the concrete implementations supplied by the framework (for Java, OCL, and EMF languages) implement the &lt;code&gt;IParameterizedConstraintParser&lt;/code&gt; interface, also.
&lt;/p&gt;&lt;p&gt;
A constraint parser is instantiated using the default (no-argument) constructor; only a single instance is created by the system.
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         The &lt;tt&gt;org.eclipse.emf.validation.ocl&lt;/tt&gt; plug-in provides support for OCL as a constraint language using a constraint parser.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2005 IBM Corporation and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
