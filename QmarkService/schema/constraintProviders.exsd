<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.emf.validation" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.emf.validation" id="constraintProviders" name="EMF Model Validation Constraint Providers"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
This extension point allows plug-ins to contribute constraints into the model validation framework.
&lt;/p&gt;
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appInfo>
            <meta.element />
         </appInfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="category" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="constraintProvider" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="category">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="id"/>
         </appInfo>
         <documentation>
            Defines a constraint category.  Constraints that are members of this category can
be enabled or disabled by the user in the preference page, unless the
&quot;mandatory&quot; attribute is set.
&lt;p&gt;
The body of the &quot;category&quot; element should contain the localized description of the category.
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="category" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Identifier for the category.  The ID is a hierarchical name, delimited by slashes, relative to the ID
of the containing &quot;category&quot; element (if any).  There is no problem with defining a category that is already
defined by some other plug-in; the new name and description override the old, but if the IDs were the same,
then the expectation is that so is the meaning.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The localized name of the category.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="mandatory" type="boolean">
            <annotation>
               <documentation>
                  Indicates whether the category is mandatory or not.  The user cannot disable
constraints that are in mandatory categories, so care must be taken in 
designating a category as mandatory.  It must really be essential
to the correct functioning of the application!

If not specified, the implied value is false.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="constraintProvider">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="uriNsPrefix"/>
         </appInfo>
         <documentation>
            Defines a set of constraints that apply to instances of EClasses in one
or more EPackages identified by their namespace URIs.  Any number of constraintProviders
can be defined for the same packages, and a single constraintProvider can specify any number of packages.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="package" minOccurs="1" maxOccurs="unbounded"/>
            <element ref="description" minOccurs="0" maxOccurs="1"/>
            <element ref="target" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="constraints" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="mode">
            <annotation>
               <documentation>
                  Describes whether a constraint operates in batch mode or live mode.
If not specified, then the assumption is that the provider provides constraints
in mixed modes.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="Batch">
                  </enumeration>
                  <enumeration value="Live">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="cache" type="boolean" use="default" value="true">
            <annotation>
               <documentation>
                  For internal use only.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  An optional constraint provider class that will provide batch and live constraints.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.emf.validation.internal.service.IModelConstraintProvider"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="package">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="namespaceUri"/>
         </appInfo>
         <documentation>
            The &quot;package&quot; element declares an EMF EPackage to whose EClasses the
constraint provider provides constraints.  One or more packages may be
declared.  The targets of any constraints are resolved in the namespaces of
the specified packages.
&lt;p&gt;
Note that only EClasses that are members of those
exact packages indicated will have constraints applied to them from this
provider.  In particular, any sub-packages of an EPackage that are to have
constraints provided must be explicitly declared.
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <attribute name="namespaceUri" type="string" use="required">
            <annotation>
               <documentation>
                  The namespace URI of an EMF package supported by the constraint provider.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="description" type="string">
      <annotation>
         <appInfo>
            <meta.element translatable="true"/>
         </appInfo>
         <documentation>
            Optional localizable description for an element in the extension point
implementation.  May appear in the GUI, depending on the element being
described.
         </documentation>
      </annotation>
   </element>

   <element name="target">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="class"/>
         </appInfo>
         <documentation>
            Specification of which model elements, events, and structural features constraints can be applied to.
&lt;p&gt;
When attached to a constraintProvider, this tag indicates generally the scope of the
constraints that a provider provides.  This can be used by the validation framework to reduce
the number of providers that it consults when performing a validation, and is just
an optimization.
&lt;/p&gt;
&lt;p&gt;
When attached to a specific constraint element, the target specifies which particular EClass (for batch and live constraints) and
events and/or features (for live constraints) the constraint applies to.
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <choice minOccurs="0" maxOccurs="unbounded">
               <element ref="event"/>
               <element ref="customEvent"/>
            </choice>
         </sequence>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  Optionally identifies the model element type to which constraints apply.
If omitted, then the constraint applies to all types in the EPackage on which
the constraint provider is defined.

In the case of two model element types with the same name in two different packages, use the optional qualified namespace URI in the following format to ensure that the target is resolved correctly:

myClass:http:///someNameSpaceURI/1.0.0/
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="event">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            The EMF notification event that causes the validation of an instance of the
associated model element type (live constraints only).  This element may
optionally specify any number of specific features to which the constraint
applies.  Any notifications for features not listed (if any are specified)
will not trigger evaluation of the constraint.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="feature" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="name" use="required">
            <annotation>
               <documentation>
                  Corresponds to the name of an EMF notification type.
&lt;p&gt;
Note that the &quot;Create&quot; event is not the deprecated EMF CREATE Notification type; it is a custom notification type that clients of the validation
framework may choose to implement if they can simulate create notifications.
Its Notification type code is &lt;tt&gt;0&lt;/tt&gt;.
&lt;/p&gt;
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="Add">
                  </enumeration>
                  <enumeration value="Add Many">
                  </enumeration>
                  <enumeration value="Create">
                  </enumeration>
                  <enumeration value="Move">
                  </enumeration>
                  <enumeration value="Remove">
                  </enumeration>
                  <enumeration value="Remove Many">
                  </enumeration>
                  <enumeration value="Removing Adapter">
                  </enumeration>
                  <enumeration value="Resolve">
                  </enumeration>
                  <enumeration value="Set">
                  </enumeration>
                  <enumeration value="Unset">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
      </complexType>
   </element>

   <element name="feature">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            Indicates for which structural feature the constraint should be triggered.
If no features are specified, then the constraint is triggered for
any feature change in the associated model element type.
&lt;p&gt;
Applies only to live-mode constraints.
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The feature name.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="constraint">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            Defines a single constraint.  The lang attribute identifies the language in
which the constraint is implemented.  For the &quot;Java&quot; language, this element
identifies a class that extends the AbstractModelConstraint class.  Other
languages, such as &quot;OCL&quot;, may make use of the body of the constraint element
and/or one or more parameters.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="description" minOccurs="0" maxOccurs="1"/>
            <element ref="message"/>
            <element ref="target" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="param" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the constraint.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A localizable name for the constraint (appears in the GUI).
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="lang" type="string" use="required">
            <annotation>
               <documentation>
                  Identifies the language in which the constraint is expressed.
The language is not case-sensitive.
&lt;p&gt;
The currently supported languages are &quot;Java&quot; and &quot;OCL&quot;.
&lt;/p&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="severity" use="default" value="ERROR">
            <annotation>
               <documentation>
                  The severity of the problem if the constraint is violated.  This correlates to
the severity of tasks in the Tasks view of the Eclipse environment.
&lt;p&gt;
The default severity (if none specified) is ERROR.  The CANCEL severity should
be used with caution, as it causes the validation operation to be interrupted,
possibly resulting in the loss of valuable diagnostic information from other
constraints.
&lt;/p&gt;
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="INFO">
                  </enumeration>
                  <enumeration value="WARNING">
                  </enumeration>
                  <enumeration value="ERROR">
                  </enumeration>
                  <enumeration value="CANCEL">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="statusCode" type="string" use="required">
            <annotation>
               <documentation>
                  The plug-in unique status code, useful for logging.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  For &quot;Java&quot; language constraints only, identifies a class implementing the constraint.
&lt;p&gt;
The class must extend the AbstractModelConstraint class, providing an
implementation of the abstract validate() method.
&lt;/p&gt;
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.emf.validation.AbstractModelConstraint"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="mode" use="default" value="Batch">
            <annotation>
               <documentation>
                  Describes whether a constraint operates in batch mode, live mode, or feature mode.
&lt;p&gt;
The default is batch if not specified.
&lt;/p&gt;
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="Batch">
                  </enumeration>
                  <enumeration value="Live">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="isEnabledByDefault" type="boolean" use="default" value="true">
            <annotation>
               <documentation>
                  Indicates if this constraint should be enabled by default.

&lt;p&gt;
User can change this setting in preferences. The default value is true.
&lt;/p&gt;
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="param">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            Defines a constraint-language-specific parameter, which provides additional
meta-data not implemented by the basic XML schema.
&lt;p&gt;
Currently, neither of the supported &quot;Java&quot; or &quot;OCL&quot; languages uses additional
parameters.
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the parameter.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  The value of the parameter.  If the value attribute is not present, then the
value is assumed to be in the body of the &quot;param&quot; element.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="message" type="string">
      <annotation>
         <appInfo>
            <meta.element translatable="true"/>
         </appInfo>
         <documentation>
            The error message pattern to display to the user.
The pattern may contain {0}, {1}, etc. placeholders for replacement at
run-time by model elements or other objects provided by the constraint
implementation.
The pattern is specified in the body of the tag, possibly as a
CDATA section.
         </documentation>
      </annotation>
   </element>

   <element name="constraints">
      <annotation>
         <documentation>
            Container for constraint declarations.  The constraints grouped in one of
these elements belong to the same set of categories.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="include" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="constraint" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="categories" type="string">
            <annotation>
               <documentation>
                  A comma-delimited list of fully-qualified category IDs to which the constraints grouped in this element
belong.  If none are specified, then the constraints are members of the default category.  It is not
recommended, however, to use the default category.
&lt;p&gt;
Note that it is not a good idea to include constraints simultaneously in a category and some
ancestor or descendent category.  This would be quite confusing to the user.
&lt;/p&gt;
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="include">
      <annotation>
         <documentation>
            For internal use only.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="path" type="string" use="required">
            <annotation>
               <documentation>
                  For internal use only.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="customEvent">
      <annotation>
         <documentation>
            &lt;p&gt;
A custom notification event that causes the validation of an instance of the
associated model element type (live constraints only).  The custom events
available are determined by the installed providers of event generators on the
&lt;tt&gt;org.eclipse.emf.validation.eventTypes&lt;/tt&gt; extension point.
&lt;/p&gt;&lt;p&gt;
This element may
optionally specify any number of specific features to which the constraint
applies.  Any notifications for features not listed (if any are specified)
will not trigger evaluation of the constraint.
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="feature" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  Corresponds to the name of an EMF notification type.
&lt;p&gt;
Note that the &quot;Create&quot; event is not the deprecated EMF CREATE Notification type; it is a custom notification type that clients of the validation
framework may choose to implement if they can simulate create notifications.
Its Notification type code is &lt;tt&gt;0&lt;/tt&gt;.
&lt;/p&gt;
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         1.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
This example shows an extension that declares a small hierarchy of constraint
categories, with example constraints showing the difference between Java and OCL
languages.
&lt;/p&gt;
&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.emf.validation.constraintProviders&quot;&gt;
         
      &lt;category
            name=&quot;Example Constraints&quot;
            id=&quot;com.example.validation&quot;&gt;
            Description of the example constraints category.
         &lt;category
               name=&quot;Foo&quot;
               id=&quot;foo&quot;&gt;
               Constraints for the EMF implementation of the &quot;Foo&quot; metamodel.
         &lt;/category&gt;
      &lt;/category&gt;
      
      &lt;constraintProvider&gt;
         
         &lt;package namespaceUri=&quot;http:///com/example/foo.ecore&quot; /&gt;
         
         &lt;constraints categories=&quot;com.example.validation/foo&quot;&gt;
             &lt;constraint
                  class=&quot;com.example.validation.constraints.ThingReferences&quot;
                  statusCode=&quot;11&quot;
                  severity=&quot;WARNING&quot;
                  lang=&quot;Java&quot;
                  name=&quot;Things References&quot;
                  id=&quot;thingReferences&quot;&gt;
               &lt;description&gt;
                  Things must not reference things that do not exist.
               &lt;/description&gt;
               &lt;message&gt;&quot;{0}&quot; references non-existing things &quot;{1}.&quot;&lt;/message&gt;
               &lt;target class=&quot;Thing&quot; /&gt;
            &lt;/constraint&gt;
            
            &lt;constraint
                  statusCode=&quot;12&quot;
                  severity=&quot;ERROR&quot;
                  lang=&quot;OCL&quot;
                  mode=&quot;Live&quot;
                  name=&quot;Things Must be Named&quot;
                  id=&quot;thingName&quot;&gt;
               &lt;description&gt;Things must have names.&lt;/description&gt;
               &lt;message&gt;Thing has no name.&lt;/message&gt;
               
               &lt;target class=&quot;Thing&quot;&gt;
                  &lt;event name=&quot;Set&quot;&gt;
                     &lt;feature name=&quot;name&quot; /&gt;
                  &lt;/event&gt;
               &lt;/target&gt;
               
               &lt;!-- The OCL constraint expression. --&gt;
               &lt;![CDATA[
               
               name-&gt;notEmpty()
                   
               ]]&gt;
            &lt;/constraint&gt;
         &lt;/constraints&gt;
      &lt;/constraintProvider&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
The &quot;Java&quot; language constraints are implemented using the facilities provided
by the
&lt;a href=&quot;../api/org/eclipse/emf/validation/package-summary.html&quot;&gt;org.eclipse.emf.validation&lt;/a&gt;
package in the plug-in of the same name.
&lt;/p&gt;
&lt;p&gt;
To apply the constraints defined on this extension point to the element(s) of
a model, use the utilities offered by the
&lt;a href=&quot;../api/org/eclipse/gmf/runtime/emf/core/EditingDomain.html&quot;&gt;org.eclipse.gmf.runtime.emf.core.EditingDomain&lt;/a&gt;
class.
These utilities validate the model against all batch and live constraints,
returning the result in a composite status object.  Live validation is also
performed internally in the system as the model is changed.
&lt;/p&gt;
      </documentation>
   </annotation>


   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2003, 2004  IBM Corporation and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
