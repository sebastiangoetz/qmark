<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.emf.validation" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.eclipse.emf.validation" id="constraintBindings" name="EMF Validation Constraint Bindings"/>
      </appinfo>
      <documentation>
         This extension point allows clients of the EMF Validation
framework to define &quot;client contexts&quot; that describe the
objects that they are interested in validating, and to bind
them to constraints that they are interested in enforcing on
these objects.
      </documentation>
   </annotation>

   <include schemaLocation="schema://org.eclipse.core.expressions/schema/expressionLanguage.exsd"/>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="clientContext" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="binding" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="clientContext">
      <annotation>
         <appinfo>
            <meta.element labelAttribute="id"/>
         </appinfo>
         <documentation>
            &lt;p&gt;
Definition of a client context, representing a class of
objects that a client wishes to apply a set of constraints
to.
&lt;/p&gt;
&lt;p&gt;
A client context can declare an
&lt;code&gt;&amp;lt;enablement&amp;gt;&lt;/code&gt; expression that matches
model elements that are included in the context.
Where that is not sufficient, an alternative is to define
a selector class using a &lt;code&gt;&amp;lt;selector&amp;gt;&lt;/code&gt;
element.
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <choice>
            <element ref="enablement"/>
            <element ref="selector"/>
         </choice>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  The unique ID of the client context.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="default" type="boolean">
            <annotation>
               <documentation>
                  Optionally indicates that the client context is to be considered as a &quot;default&quot; context.
A default context is implicitly bound to every constraint for
which there is no other context explicitly bound to it.
By default, a client context is not default.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="selector">
      <annotation>
         <documentation>
            A selector determines which model elements are included in
a client context when an XML expression is too cumbersome or
somehow not sufficient to implement the test.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Identifies a class implementing the &lt;code&gt;org.eclipse.emf.validation.internal.model.IClientSelector&lt;/code&gt;
internal API interface.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.emf.validation.internal.model.IClientSelector"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="binding">
      <annotation>
         <appinfo>
            <meta.element labelAttribute="context"/>
         </appinfo>
         <documentation>
            &lt;p&gt;
Declares a binding between a client context and one or more
constraints.  The context can, itself, be declared by the
same plug-in or by a different plug-in.
&lt;/p&gt;
&lt;p&gt;
The constraints to be bound may be specified by either:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;code&gt;constraint&lt;/code&gt; attribute, to reference
      a single constraint&lt;/li&gt;
  &lt;li&gt;the &lt;code&gt;category&lt;/code&gt; attribute, to reference
      a single constraint category and all of the constraints
      that it includes&lt;/li&gt;
  &lt;li&gt;any number of nested &lt;code&gt;&amp;lt;constraint&amp;gt;&lt;/code&gt;
      and/or &lt;code&gt;&amp;lt;category&amp;gt;&lt;/code&gt; elements to
      reference multiple constraints and/or categories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Since the 1.3 release, selective exclusion of constraints and sub-categories that are contained by included categories is supported.  Within a &lt;code&gt;&amp;lt;binding&amp;gt;&lt;/code&gt; element, ordering of inclusion and exclusion elements is significant:  they are processed in the order in which they are declared in the extension.  However, the order of inclusions and exclusions in separate bindings for the same context is undefined.
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <choice minOccurs="0" maxOccurs="unbounded">
               <element ref="category"/>
               <element ref="constraint"/>
               <element ref="extendClientContext"/>
               <element ref="excludeCategory"/>
               <element ref="excludeConstraint"/>
            </choice>
         </sequence>
         <attribute name="context" type="string" use="required">
            <annotation>
               <documentation>
                  References the ID of a context that is bound to one or more
constraints.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="constraint" type="string">
            <annotation>
               <documentation>
                  Identifies a single constraint to be bound to the client
context.  This attribute may not be used in conjunection with
the &lt;code&gt;category&lt;/code&gt; attribute.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="category" type="string">
            <annotation>
               <documentation>
                  &lt;p&gt;
Identifies a constraint category to be bound to the client
context.  The referenced category and all of its constraints, sub-categories, and their constraints are bound.
&lt;/p&gt;
&lt;p&gt;
This attribute may not be used in conjunection with
the &lt;code&gt;constraint&lt;/code&gt; attribute.
&lt;/p&gt;
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="constraint">
      <annotation>
         <appinfo>
            <meta.element labelAttribute="ref"/>
         </appinfo>
         <documentation>
            Includes a constraint in a client context
&lt;code&gt;&amp;lt;binding&amp;gt;&lt;/code&gt;.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="ref" type="string" use="required">
            <annotation>
               <documentation>
                  References the fully-qualified ID of a constraint to bind
the client context to.  The ID includes the constraint&apos;s
contributing plug-in ID, if it is not explicit in the XML
definition of the constraint.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="category">
      <annotation>
         <appinfo>
            <meta.element labelAttribute="ref"/>
         </appinfo>
         <documentation>
            Includes a constraint category in a client context
&lt;code&gt;&amp;lt;binding&amp;gt;&lt;/code&gt;.  All of the referenced
category&apos;s constraints and those of any sub-categories
(recursively) are included.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="ref" type="string" use="required">
            <annotation>
               <documentation>
                  References the fully-qualified ID of a constraint category to
bind the client context to.  The category ID does not
necessarily include its contributing plug-in ID, but is a
path reflecting the hierarchical structure of categories.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="extendClientContext">
      <annotation>
         <documentation>
            Since 1.3.  References a client-context that the bound context extends.  Conceptually, this declares that objects matching the referenced context also match my bound context.  In practice, this means that my bound context inherits all of the constraint bindings from the referenced context.
&lt;br/&gt;&lt;br/&gt;
Of course, subsequent exclusions can filter out unwanted constraints, too.  &lt;b&gt;Note&lt;/b&gt;, also, that this effects a dependency on the referenced client context and also imposes a partial ordering on the bindings.  All of the bindings contributed to the referenced context are applied before any inclusions or exclusions that follow the &lt;code&gt;&amp;lt;extendClientContext&amp;gt;&lt;/code&gt; element in the current &lt;code&gt;&amp;lt;binding&amp;gt;&lt;/code&gt;.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="ref" type="string" use="required">
            <annotation>
               <documentation>
                  References the ID of a client-context to extend.  All constraint bindings of the client context are inherited by this binding.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="excludeCategory">
      <annotation>
         <documentation>
            Since 1.3.  Excludes a constraint category from a client context
&lt;code&gt;&amp;lt;binding&amp;gt;&lt;/code&gt;.  All of the referenced
category&apos;s constraints and those of any sub-categories
(recursively) are excluded.  This is useful when including some parent category, to filter out selective sub-categories.  Not only is it simpler than explicitly including all of the desired sub-categories, but it ensures that sub-categories that are added later will be included implicitly.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="ref" type="string" use="required">
            <annotation>
               <documentation>
                  References the fully-qualified ID of a constraint category to
exclude from the client context. The category ID does not
necessarily include its contributing plug-in ID, but is a
path reflecting the hierarchical structure of categories.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="excludeConstraint">
      <annotation>
         <documentation>
            Since 1.3.  Excludes a constraint from a client context
&lt;code&gt;&amp;lt;binding&amp;gt;&lt;/code&gt;. This is useful when including some parent category, to filter out selective constraints cointained within it.  Not only is it simpler than explicitly including all of the desired constraints and sub-categories, but it ensures that constraints and sub-categories that are added later will be included implicitly.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="ref" type="string" use="required">
            <annotation>
               <documentation>
                  References the fully-qualified ID of a constraint to exclude
from the client context.  The ID includes the constraint&apos;s
contributing plug-in ID, if it is not explicit in the XML
definition of the constraint.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         1.0
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         &lt;p&gt;
Example of a context which includes &lt;code&gt;EObjects&lt;/code&gt; in *.library resources only, not
in some other kind of resource that uses the EMF Library example meta-model (utilizing an
hypothetical property tester):
&lt;/p&gt;
&lt;pre&gt;
   &lt;extension point=&quot;org.eclipse.emf.validation.constraintBindings&quot;&gt;
      &lt;clientContext id=&quot;com.example.MyClient&quot;&gt;
         &lt;enablement&gt;
            &lt;with variable=&quot;resource&quot;/&gt;
               &lt;test
                  property=&quot;com.example.matchURI&quot;
                  value=&quot;*.library&quot;/&gt;
            &lt;/with&gt;
         &lt;/enablement&gt;
      &lt;/clientContext&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
&lt;p&gt;
Example of a binding of a single constraint to the MyClient context:
&lt;/p&gt;
&lt;pre&gt;
   &lt;extension point=&quot;org.eclipse.emf.validation.constraintBindings&quot;&gt;
      &lt;binding
         context=&quot;com.example.MyClient&quot;
         constraint=&quot;org.eclipse.uml2.validation.classifiers.genCycle&quot;/&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
&lt;p&gt;
Example of binding multiple constraints and constraint categories to the MyClient context:
&lt;/p&gt;
&lt;pre&gt;
   &lt;extension point=&quot;org.eclipse.emf.validation.constraintBindings&quot;&gt;
      &lt;binding context=&quot;com.example.MyClient&quot;/&gt;
         &lt;constraint ref=&quot;org.eclipse.uml2.validation.namespace.distinctMembers&quot;/&gt;
         &lt;constraint ref=&quot;org.eclipse.uml2.validation.classifiers.genCycle&quot;/&gt;
         &lt;category ref=&quot;uml2/spec/classes/kernel/namespaces&quot;/&gt;
         &lt;category ref=&quot;uml2/spec/classes/kernel/classifiers&quot;/&gt;
      &lt;/binding&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
      </documentation>
   </annotation>



   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         Copyright (c) 2005, 2008  IBM Corporation, Zeligsoft Inc., and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
