<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.emf.validation">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.emf.validation" id="traversal" name="EMF Model Validation Model Traversal Strategies"/>
      </appInfo>
      <documentation>
         Extension point on which plug-ins can contribute customized logic for
traversal of EMF metamodels that they define, in batch validation.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="traversalStrategy" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="traversalStrategy">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="namespaceUri"/>
         </appInfo>
         <documentation>
            Declares a traversal strategy that knows how to iterate sub-trees rooted at
elements of types in a specific EPackage.

Zero or more EClasses may be specified to indicate which specific element types
are to use the traversal strategy.  If no EClasses are listed, then this
strategy constitutes the default for the package.

Multiple traversal strategies can be provided for the same EPackage, for
example to iterate different element types in different ways.  In fact, at
at least two declarations are needed to define a default strategy for the
package and a select number of alternative implementations for specific
EClasses.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="eclass" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="namespaceUri" type="string" use="required">
            <annotation>
               <documentation>
                  The namespace URI of the EPackage for which the extension declares a traversal
strategy.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The fully-qualified name of a class implementing the ITraversalStrategy
interface.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.emf.validation.internal.service.ITraversalStrategy"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="eclass">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            Indicates a specific EClass in the package identified by the extension&apos;s
namespace URI to which the traversal strategy applies.  This EClass is
assumed to be one whose instances can serve as a root container, thus
defining a &quot;kind of&quot; model implemented by the metamodel.  A metamodel may
require different traversal algorithms for resources rooted in different
metaclasses; the validation system finds the most appropriate traversal
strategy for an element according to its root container.

The inheritance of EClasses is taken into account.  During validation, the
system finds the most specific strategy declaration available for any EClass
(defaulting to the package default strategy if needed).

As an example of metamodels that distinguish different kinds of models by the
root container type, the UML 2.0 metamodel defines Model and Profile
metaclasses (both specializations of Package) that can serve as root
containers.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name of an EClass in the EPackage.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         1.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
This example shows an extension that declares a traversal strategy for the EXTLibrary
meta-model.  It applies to traversals starting at Persons or Items (rather than at libraries),
perhaps because its purpose is to back-track to the nearest containing Library and start from there.  When traversal starts from a Library, this extension indicates that the default
strategy (recursion over the containment tree) is sufficient.
&lt;/p&gt;
&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.emf.validation.traversal&quot;&gt;
         
      &lt;traversalStrategy
            namespaceUri=&quot;http:///org/eclipse/emf/examples/library/extlibrary.ecore/1.0.0&quot;
            class=&quot;com.example.validation.traversal.EXTLibraryTraversalStrategy&quot;/&gt;
         &lt;eclass name=&quot;Person&quot; /&gt;
         &lt;eclass name=&quot;Item&quot; /&gt;
      &lt;/traversalStrategy&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The value of the &lt;tt&gt;&amp;lt;traversalStrategy&amp;gt;&lt;/tt&gt; element &lt;tt&gt;class&lt;/tt&gt; attribute must be the fully qualified name of a class that implements
the &lt;code&gt;org.eclipse.emf.validation.service.ITraversalStrategy&lt;/code&gt; interface.
&lt;p&gt;
The registered traversal strategy (if any) can also be overridden at run-time by providing
a strategy implementation to the validator via the
&lt;code&gt;IBatchValidator.setTraversalStrategy(ITraversalStrategy)&lt;/code&gt; method.
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2005 IBM Corporation and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
